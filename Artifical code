using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class SteeringBehaviour_Flee : SteeringBehaviour
{
  [Header("Flee Properties")]
  [Header("Settings")]
  public Transform m_FleeTarget;
  public float m_FleeRadius;

  [Space(10)]

  [Header("Debugs")]
  [SerializeField]
  protected Color m_Debug_RadiusColour = Color.yellow;

  public override Vector2 CalculateForce()
  {
    // Check if a flee target is assigned
    if (m_FleeTarget == null)
    {
      return Vector2.zero;
    }

    // Calculate the distance to the flee target
    Vector2 direction = m_FleeTarget.position - transform.position;
    float distance = direction.magnitude;

    // Check if the target is within the flee radius
    if (distance > m_FleeRadius)
    {
      return Vector2.zero;
    }

    // Calculate the desired flee velocity 
    Vector2 desiredVelocity = direction * -1.0f;
    desiredVelocity.Normalize();

    // Scale the desired velocity by the flee weight
    desiredVelocity *= m_Weight;

    // Calculate the fleeing steering force
    Vector2 force = desiredVelocity - m_Velocity;
    force *= m_MaxForce;

    // Limit the force
    force = Vector2.ClampMagnitude(force, m_MaxForce);

    return force;
  }

  protected override void OnDrawGizmosSelected()
  {
    if (Application.isPlaying)
    {
      if (m_Debug_ShowDebugLines && m_Active && m_Manager.m_Entity)
      {
        Gizmos.color = m_Debug_RadiusColour;
        Gizmos.DrawWireSphere(transform.position, m_FleeRadius);

        base.OnDrawGizmosSelected();
      }
    }
  }
}










---------------------------------------------------------------------------------------- 
----------------------------------------------------------------------------------------





using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Pursuit : SteeringBehaviour
{
    [Header("Pursuit Properties")]
    public MovingEntity m_PursuingEntity;

    public override Vector2 CalculateForce()
    {
        if (!m_Active || !m_PursuingEntity)
            return Vector2.zero;

        Vector2 toTarget = m_PursuingEntity.transform.position - transform.position;
        float distance = toTarget.magnitude;

        float predictionTime = distance / (m_Manager.m_Entity.m_MaxSpeed + m_PursuingEntity.m_MaxSpeed);

        Vector2 targetPos = m_PursuingEntity.transform.position + (m_PursuingEntity.m_Velocity * predictionTime);

        return (targetPos - (Vector2)transform.position).normalized * m_Manager.m_Entity.m_MaxSpeed;
    }
}









 public override Vector2 CalculateForce()
    {
        if (!m_PursuingEntity)  // Safety check
            return Vector2.zero;  

        // 1. Distance to pursued entity
        Vector2 distanceToTarget = m_PursuingEntity.transform.position - transform.position;

        // 2. Combined speed
        float combinedSpeed = m_Manager.m_Entity.m_MaxSpeed + m_PursuingEntity.m_MaxSpeed;

        // 3. Prediction time
        float predictionTime = distanceToTarget.magnitude / combinedSpeed;

        // 4. Seek with prediction
        Vector2 predictedTargetPosition = m_PursuingEntity.transform.position + 
                                          m_PursuingEntity.m_Velocity * predictionTime;

        Vector2 desiredVelocity = (predictedTargetPosition - transform.position).normalized * m_Manager.m_Entity.m_MaxSpeed;

        return desiredVelocity - m_Manager.m_Entity.m_Velocity;  // Steering force
    }








using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Pursuit : SteeringBehaviour
{
    [Header("Pursuit Properties")]
    [Header("Settings")]
    public MovingEntity m_PursuingEntity;

    public override Vector2 CalculateForce()
    {
        Vector2 force = Vector2.zero;

        if (m_PursuingEntity != null)
        {
            // Calculate distance between AI Agent and Pursuing Entity
            Vector2 distanceVector = m_PursuingEntity.transform.position - transform.position;
            
            // Calculate combined speed
            float combinedSpeed = m_Manager.m_Entity.m_MaxSpeed + m_PursuingEntity.m_Velocity.magnitude;

            // Calculate prediction time
            float predictionTime = distanceVector.magnitude / combinedSpeed;

            // Calculate new seek target
            Vector2 seekTarget = m_PursuingEntity.transform.position + m_PursuingEntity.m_Velocity * predictionTime;

            // Perform seek behavior towards the new target
            force = (seekTarget - (Vector2)m_Manager.m_Entity.transform.position).normalized * m_Weight;
        }

        return force;
    }
}







---------------------------------------------------------------------------------------- 
----------------------------------------------------------------------------------------




"Evade"


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Evade : SteeringBehaviour
{
    [Header("Evade Properties")]
    [Header("Settings")]
    public MovingEntity m_EvadingEntity;
    public float m_EvadeRadius;

    [Space(10)]

    [Header("Debugs")]
    [SerializeField]
    protected Color m_Debug_RadiusColour = Color.yellow;

    public override Vector2 CalculateForce()
    {
        Vector2 force = Vector2.zero;

        if (m_EvadingEntity != null)
        {
            // Calculate distance between AI Agent and Evading Entity
            Vector2 distanceVector = m_EvadingEntity.transform.position - transform.position;

            // Check if the Evading Entity is within the evade radius
            if (distanceVector.magnitude < m_EvadeRadius)
            {
                // Calculate prediction time
                float predictionTime = distanceVector.magnitude / m_Manager.m_Entity.m_MaxSpeed;

                // Calculate future position of the Evading Entity
                Vector2 futurePosition = m_EvadingEntity.transform.position + m_EvadingEntity.m_Velocity * predictionTime;

                // Perform flee behavior from the future position
                force = (transform.position - futurePosition).normalized * m_Weight;
            }
        }

        return force;
    }

    protected override void OnDrawGizmosSelected()
    {
        if (Application.isPlaying)
        {
            if (m_Debug_ShowDebugLines && m_Active && m_Manager.m_Entity)
            {
                Gizmos.color = m_Debug_RadiusColour;
                Gizmos.DrawWireSphere(transform.position, m_EvadeRadius);

                base.OnDrawGizmosSelected();
            }
        }
    }
}


User
• Evade, much like Pursuit is the improved version of its base
version, in this case Flee. Evade will attempt to avoid its target
by using its current velocity.
• Using your knowledge of Flee and Pursuit attempt to solve
Evade.

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Evade : SteeringBehaviour
{
    [Header("Evade Properties")]
    [Header("Settings")]
    public MovingEntity m_EvadingEntity;
    public float m_EvadeRadius;

    [Space(10)]

    [Header("Debugs")]
    [SerializeField]
    protected Color m_Debug_RadiusColour = Color.yellow;

    public override Vector2 CalculateForce()
    {
        //delete me
        return Vector2.zero;
    }

    protected override void OnDrawGizmosSelected()
    {
        if (Application.isPlaying)
        {
            if (m_Debug_ShowDebugLines && m_Active && m_Manager.m_Entity)
            {
                Gizmos.color = m_Debug_RadiusColour;
                Gizmos.DrawWireSphere(transform.position, m_EvadeRadius);

                base.OnDrawGizmosSelected();
            }
        }
    }
}








    public override Vector2 CalculateForce()
    {
        if (!m_EvadingEntity) // Safety check
            return Vector2.zero;  

        // 1. Distance to evading entity
        Vector2 distanceToTarget = m_EvadingEntity.transform.position - transform.position;

        // 2. Check if within evade radius
        if (distanceToTarget.magnitude > m_EvadeRadius)
            return Vector2.zero; // Outside the threat zone, no need to evade

        // 3. Combined speed
        float combinedSpeed = m_Manager.m_Entity.m_MaxSpeed + m_EvadingEntity.m_MaxSpeed;

        // 4. Prediction time
        float predictionTime = distanceToTarget.magnitude / combinedSpeed;

        // 5. Predicted Position of Threat
        Vector2 predictedTargetPosition = m_EvadingEntity.transform.position + 
                                          m_EvadingEntity.m_Velocity * predictionTime;

        // 6. Flee from Predicted Position
        Vector2 desiredVelocity = (transform.position - predictedTargetPosition).normalized * 
                                   m_Manager.m_Entity.m_MaxSpeed;

        return desiredVelocity - m_Manager.m_Entity.m_Velocity; // Steering force 
    }
}






---------------------------------------------------------------------------------------- 
----------------------------------------------------------------------------------------



arrive


public override Vector2 CalculateForce()
{
    // Calculate the desired direction towards the target
    Vector2 desiredDirection = m_TargetPosition - transform.position;

    // Calculate the distance to the target
    float distanceToTarget = desiredDirection.magnitude;

    // Adjust desired speed based on distance and slowing radius
    float desiredSpeed = Mathf.Clamp01(distanceToTarget / m_SlowingRadius) * m_Agent.maxSpeed;

    // Normalize the desired direction to get a unit vector
    desiredDirection.Normalize();

    // Calculate the steering force needed to reach the target at the desired speed
    Vector2 steeringForce = desiredDirection * desiredSpeed - m_Agent.velocity;

    return steeringForce;
}




------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------




using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Manager : MonoBehaviour
{
    public MovingEntity m_Entity { get; private set; }
    public float m_MaxForce = 100f;
    [SerializeField]
    private float m_AvoidanceWeight = 2f;
    private float m_RemainingForce; // Stores the remaining force available after processing previous behaviors
    public List<SteeringBehaviour> m_SteeringBehaviours;

    private void Awake()
    {
        m_Entity = GetComponent<MovingEntity>();

        if (!m_Entity)
        {
            Debug.LogError("Steering Behaviours only working on type moving entity", this);
        }
    }

    public Vector2 GenerateSteeringForce()
    {
        m_RemainingForce = m_MaxForce;
        Vector2 force = Vector2.zero;

        // Process avoidance behaviors first, with lower priority, 
        // giving higher priority to the remaining behaviors
        for (int i = 0; i < m_SteeringBehaviours.Count; i++)
        {
            if (!m_SteeringBehaviours[i].m_Active || m_RemainingForce <= 0f)
            {
                continue;
            }

            // Apply avoidance behaviors with lower weight
            if (m_SteeringBehaviours[i] is SteeringBehaviour_Avoidance)
            {
                Vector2 tempForce = m_SteeringBehaviours[i].CalculateForce() * m_AvoidanceWeight;

                // Reduce remaining force only by the used portion of the avoidance weight
                m_RemainingForce -= Mathf.Min(m_RemainingForce, tempForce.magnitude / m_AvoidanceWeight);

                force += tempForce;
                continue;
            }

            // Process other behaviors normally
            Vector2 tempForce = m_SteeringBehaviours[i].CalculateForce();

            // Truncate if force exceeds remaining or max force
            if (tempForce.magnitude > m_RemainingForce || tempForce.magnitude > m_MaxForce)
            {
                tempForce = Maths.Normalise(tempForce) * Mathf.Min(m_RemainingForce, m_MaxForce);
            }

            m_RemainingForce -= tempForce.magnitude;
            force += tempForce;
        }

        return force;
    }

    public void EnableExclusive(SteeringBehaviour behaviour)
    {
        if (m_SteeringBehaviours.Contains(behaviour))
        {
            foreach (SteeringBehaviour sb in m_SteeringBehaviours)
            {
                sb.m_Active = false;
            }

            behaviour.m_Active = true;
        }
        else
        {
            Debug.Log(behaviour + " doesn't exist on object", this);
        }
    }

    public void DisableAllSteeringBehaviours()
    {
        foreach (SteeringBehaviour sb in m_SteeringBehaviours)
        {
            sb.m_Active = false;
        }
    }
}







------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------



using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SteeringBehaviour_Wander : SteeringBehaviour
{
  [Header("Wander Properties")]
  [Header("Settings")]
  public float m_WanderRadius = 2;
  public float m_WanderOffset = 2;
  public float m_AngleDisplacement = 2;

  Vector2 m_CirclePosition;
  Vector2 m_PointOnCircle;
  float m_Angle = 0.0f;

  [Space(10)]

  [Header("Debugs")]
  [SerializeField]
  protected Color m_Debug_RadiusColour = Color.yellow;
  [SerializeField]
  protected Color m_Debug_TargetColour = Color.cyan;

  public override Vector2 CalculateForce()
  {
    // 1. Calculate a turning angle. The m_Angle value starts at 0 and each frame you
    // should add or take away m_Angle Displacement. This will give you a current
    // turning angle.
    m_Angle += Random.Range(-m_AngleDisplacement, m_AngleDisplacement);

    // 2. Create a point in front of the agent. m_Wander Offset should be the distance
    // of this point from the agent.
    m_CirclePosition = transform.position + transform.up * m_WanderOffset;

    // 3. Calculate a point on a circle with the radius of m_WanderRadius.
    float angleRad = Mathf.Deg2Rad * m_Angle;
    m_PointOnCircle = m_CirclePosition + new Vector2(Mathf.Sin(angleRad), Mathf.Cos(angleRad)) * m_WanderRadius;

    // 4. Seek to m_PointOnCircle
    m_DesiredVelocity = m_PointOnCircle - (Vector2)transform.position;
    m_DesiredVelocity = Maths.Normalise(m_DesiredVelocity) * m_Manager.m_Entity.m_MaxSpeed;

    // 5. Calculate the steering force
    m_Steering = m_DesiredVelocity - m_Manager.m_Entity.m_Velocity;

    return m_Steering * m_Weight;
  }

  protected override void OnDrawGizmosSelected()
  {
    if (Application.isPlaying)
    {
      if (m_Debug_ShowDebugLines && m_Active && m_Manager.m_Entity)
      {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(m_CirclePosition, m_WanderRadius);

        Gizmos.color = Color.blue;
        Gizmos.DrawLine(transform.position, m_CirclePosition);

        Gizmos.color = Color.green;
        Gizmos.DrawLine(m_CirclePosition, m_PointOnCircle);

        Gizmos.color = Color.red;
        Gizmos.DrawLine(transform.position, m_PointOnCircle);

        base.OnDrawGizmosSelected();
      }
    }
  }
}







------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------



collision avoidance 


public override Vector2 CalculateForce()
{
    Vector2 steering = Vector2.zero;
    Vector2 desiredVelocity = Vector2.zero;

    UpdateFeelers();

    float shortestDistance = Mathf.Infinity;
    Vector2 closestHitPoint = Vector2.zero;

    for (int i = 0; i < m_Feelers.Length; ++i)
    {
        RaycastHit2D tempHit = Physics2D.Raycast(transform.position, m_FeelerVectors[i], m_FeelersLength[i], m_FeelerLayerMask.value);
        if (tempHit.collider != null)
        {
            float distance = Vector2.Distance(transform.position, tempHit.point);
            if (distance < shortestDistance)
            {
                shortestDistance = distance;
                closestHitPoint = tempHit.point;
            }
        }
    }

    if (shortestDistance < Mathf.Infinity)
    {
        desiredVelocity = transform.position - (Vector3)closestHitPoint;
        desiredVelocity = desiredVelocity.normalized * m_Manager.m_Entity.m_MaxSpeed;
        steering = desiredVelocity - m_Manager.m_Entity.m_Velocity;
    }

    return steering;
}









using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;

public class SteeringBehaviour_CollisionAvoidance : SteeringBehaviour
{
    [System.Serializable]
    public struct Feeler
    {
        [Range(0, 360)]
        public float Angle; // Angle offset from forward direction
        public float MaxLength;
        public Color DebugColor; 
    }

    [SerializeField]
    private Feeler[] Feelers;

    [SerializeField]
    private LayerMask ObstacleLayerMask; 

    // Cached references for efficiency
    private MovingEntity Entity { get; }     
    private RaycastHit2D[] RaycastResults { get; }  

    public SteeringBehaviour_CollisionAvoidance()
    {
        RaycastResults = new RaycastHit2D[Feelers.Length];
    }

    private void Awake()
    {
        Entity = GetComponent<MovingEntity>();

        if (Entity == null)
        {
            Debug.LogError("SteeringBehaviour_CollisionAvoidance requires a MovingEntity component.", this);
        }
    }

    public override Vector2 CalculateForce()
    {
        Steering = Vector2.zero;
        DesiredVelocity = Vector2.zero;

        UpdateFeelers();

        RaycastHit2D closestCollision = FindClosestCollision();

        if (closestCollision.collider != null)
        {
            ApplyFleeForce(closestCollision.point);
        }

        return Steering;
    }

    private void UpdateFeelers()
    {
        for (int i = 0; i < Feelers.Length; ++i)
        {
            float length = Mathf.Lerp(1f, Feelers[i].MaxLength, Entity.Velocity.magnitude / Entity.MaxSpeed);
            Vector2 direction = Maths.RotateVector(Entity.Velocity.normalized, Feelers[i].Angle);

            RaycastResults[i].point = (Vector2)transform.position + direction * length; 
        }
    }

    private RaycastHit2D FindClosestCollision()
    {
        float closestDistance = float.MaxValue;
        int closestIndex = -1;

        for (int i = 0; i < Feelers.Length; ++i)
        {
            // Skip expensive raycast if previous result is still valid
            if (RaycastResults[i].collider == null && Physics2D.Raycast(transform.position, RaycastResults[i].point - transform.position, RaycastResults[i].point.magnitude, ObstacleLayerMask))
            {
                RaycastResults[i].collider = null; // Invalidate if no longer hitting
            } 

            // Update closest collision if applicable
            if (RaycastResults[i].collider != null && RaycastResults[i].distance < closestDistance)
            {
                closestDistance = RaycastResults[i].distance;
                closestIndex = i;
            }
        }

        return closestIndex != -1 ? RaycastResults[closestIndex] : new RaycastHit2D(); 
    }

    private void ApplyFleeForce(Vector2 collisionPoint)
    {
        Vector2 fleeDirection = (transform.position - collisionPoint).normalized;

        // Option for distance weighting:
        // float distanceFactor = Mathf.Clamp01(Vector2.Distance(transform.position, collisionPoint) / Feelers[0].MaxLength);
        // DesiredVelocity = fleeDirection * Entity.MaxSpeed * distanceFactor;

        DesiredVelocity = fleeDirection * Entity.MaxSpeed;
        Steering = Maths.MinMagnitude(DesiredVelocity - Entity.Velocity,  Manager.RemainingForce, Manager.MaxForce); 
    }

    protected override void OnDrawGizmosSelected()
    {
        if (Application.isPlaying && DebugShowDebugLines && Active && Manager.Entity)
        {
            for (int i = 0; i < Feelers.Length; ++i)
            {
                Gizmos.color = Feelers[i].DebugColor;
                Gizmos.DrawLine(transform.position, RaycastResults[i].point);
            }

            base.OnDrawGizmosSelected();
        }
    }
}






------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------


Sepretion 


public override Vector2 CalculateForce()
{
    accumulatedSeperationForce = Vector2.zero;

    // Iterate through neighboring entities within FOV and separation range
    foreach (MovingEntity neighbor in m_Manager.m_Neighbours)
    {
        if (neighbor != m_Manager.m_Entity && IsInFOV(neighbor.transform.position))
        {
            Vector2 dirToNeighbor = transform.position - neighbor.transform.position;
            float distance = dirToNeighbor.magnitude;

            // Check if neighbor is within separation range
            if (distance < m_SeperationRange)
            {
                // Calculate normalized direction and scale force based on distance
                dirToNeighbor.Normalize();
                float forceMultiplier = Mathf.Clamp01((m_SeperationRange - distance) / m_SeperationRange);
                accumulatedSeperationForce += dirToNeighbor * forceMultiplier;
            }
        }
    }

    return accumulatedSeperationForce;
}

private bool IsInFOV(Vector2 targetPosition)
{
    // Calculate direction to target and angle between forward direction and target direction
    Vector2 dirToTarget = targetPosition - transform.position;
    float angle = Vector2.Angle(transform.forward, dirToTarget);

    // Check if target is within the specified FOV
    return Mathf.Abs(angle) <= Mathf.Abs(m_FOV);
}







Cohension 



public override Vector2 CalculateForce()
{
    Vector2 averageNeighbourPos = Vector2.zero;
    int neighbourCount = 0;

    // Iterate through neighboring entities within FOV and cohesion range
    foreach (MovingEntity neighbor in m_Manager.m_Neighbours)
    {
        if (neighbor != m_Manager.m_Entity && IsInFOV(neighbor.transform.position))
        {
            float distance = Vector2.Distance(transform.position, neighbor.transform.position);

            // Check if neighbor is within cohesion range
            if (distance < m_CohesionRange)
            {
                averageNeighbourPos += neighbor.transform.position;
                neighbourCount++;
            }
        }
    }

    // Calculate desired direction towards average neighbour position
    if (neighbourCount > 0)
    {
        averageNeighbourPos /= neighbourCount;
        return (averageNeighbourPos - transform.position).normalized * m_Agent.maxSpeed;
    }
    else
    {
        return Vector2.zero;
    }
}

private bool IsInFOV(Vector2 targetPosition)
{
    // Same FOV check as in Separation behaviour
    Vector2 dirToTarget = targetPosition - transform.position;
    float angle = Vector2.Angle(transform.forward, dirToTarget);
    return Mathf.Abs(angle) <= Mathf.Abs(m_FOV);
}













------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------







------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------






------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------









//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------





