using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public abstract class PathFinding
{
    protected GridNode[] m_GridNodes;

    protected bool m_AllowDiagonal;
    protected bool m_CanCutCorners;
    protected int m_MaxPathCount = 10000;
    public List<Vector2> m_Path { get; protected set; }

    public PathFinding(bool allowDiagonal, bool cutCorners)
    {
        m_Path = new List<Vector2>();
        m_AllowDiagonal = allowDiagonal;
        m_CanCutCorners = cutCorners;
        m_GridNodes = Grid.GridNodes;
    }

    public abstract void GeneratePath(GridNode start, GridNode end);

    public Vector2 GetClosestPointOnPath(Vector2 position)
    {
        float distance = float.MaxValue;
        int closestPoint = int.MaxValue;

        for (int i = 0; i < m_Path.Count; ++i)
        {
            float tempDistance = Maths.Magnitude(m_Path[i] - position);
            if (tempDistance < distance)
            {
                closestPoint = i;
                distance = tempDistance;
            }
        }

        for (int j = 0; j < closestPoint - 1; ++j)
        {
            m_Path.RemoveAt(0);
        }

        return m_Path[0];
    }

    public Vector2 GetNextPointOnPath(Vector2 position)
    {
        Vector2 pos = position;
        if (m_Path.Count > 0)
        {
            m_Path.RemoveAt(0);

            if (m_Path.Count > 0)
                pos = m_Path[0];
        }

        return pos;
    }

    protected float Heuristic_Manhattan(GridNode start, GridNode end)
    {
        float dx = Mathf.Abs(start.transform.position.x - end.transform.position.x);
        float dy = Mathf.Abs(start.transform.position.y - end.transform.position.y);
        return dx + dy;
    }

    protected float Heuristic_Euclidean(GridNode start, GridNode end)
    {
        float dx = Mathf.Abs(start.transform.position.x - end.transform.position.x);
        float dy = Mathf.Abs(start.transform.position.y - end.transform.position.y);
        return Mathf.Sqrt(dx * dx + dy * dy);
    }

    protected float Heuristic_Octile(GridNode start, GridNode end)
    {
        float dx = Mathf.Abs(start.transform.position.x - end.transform.position.x);
        float dy = Mathf.Abs(start.transform.position.y - end.transform.position.y);
        return Mathf.Max(dx, dy) + (Mathf.Sqrt(2) - 1) * Mathf.Min(dx, dy);
    }

    public float Heuristic_Chebyshev(GridNode start, GridNode end)
    {
        float dx = Mathf.Abs(start.transform.position.x - end.transform.position.x);
        float dy = Mathf.Abs(start.transform.position.y - end.transform.position.y);
        return Mathf.Max(dx, dy);
    }
}

[System.Serializable]
public class Pathfinding_AStar : PathFinding
{
    [System.Serializable]
    class NodeInformation
    {
        public GridNode node;
        public NodeInformation parent;
        public float gCost;
        public float hCost;
        public float fCost;

        public NodeInformation(GridNode node, NodeInformation parent, float gCost, float hCost)
        {
            this.node = node;
            this.parent = parent;
            this.gCost = gCost;
            this.hCost = hCost;
            fCost = gCost + hCost;
        }

        public void UpdateNodeInformation(NodeInformation parent, float gCost, float hCost)
        {
            this.parent = parent;
            this.gCost = gCost;
            this.hCost = hCost;
            fCost = gCost + hCost;
        }
    }

    public Pathfinding_AStar(bool allowDiagonal, bool cutCorners) : base(allowDiagonal, cutCorners) { }

    public override void GeneratePath(GridNode start, GridNode end)
    {
        m_Path.Clear();

        List<NodeInformation> openList = new List<NodeInformation>();
        List<NodeInformation> closedList = new List<NodeInformation>();

        NodeInformation startingNode = new NodeInformation(start, null, 0, Heuristic_Manhattan(start, end));
        openList.Add(startingNode);

        NodeInformation current = startingNode;

        int maxIteration = 0;

        while (current != null)
        {
            maxIteration++;
            if (maxIteration > m_MaxPathCount)
            {
                Debug.LogError("Max Iteration Reached");
                break;
            }

            if (current.node == end)
            {
                SetPath(current);
                return;
            }

            for (int i = 0; i < 8; ++i)
            {
                GridNode neighbor = current.node.Neighbours[i];

                if (neighbor == null || DoesListContainNode(closedList, neighbor) || !neighbor.m_Walkable)
                    continue;

                float distance = Vector2.Distance(current.node.transform.position, neighbor.transform.position);
                float newCostToNeighbor = current.gCost + neighbor.m_Cost + distance;

                NodeInformation neighborInfo = GetNodeInformationFromList(openList, neighbor);
                if (neighborInfo != null && newCostToNeighbor < neighborInfo.gCost)
                {
                    neighborInfo.UpdateNodeInformation(current, newCostToNeighbor, Heuristic_Manhattan(neighbor, end));
                }
                else if (neighborInfo == null)
                {
                    neighborInfo = new NodeInformation(neighbor, current, newCostToNeighbor, Heuristic_Manhattan(neighbor, end));
                    openList.Add(neighborInfo);
                }
            }

            openList.Remove(current);
            closedList.Add(current);

            current = GetCheapestNode(openList);
        }

        Debug.LogError("No path found, start pos = " + start.transform.position + " - end pos = " + end.transform.position);
    }

    private void SetPath(NodeInformation end)
    {
        List<Vector2> reversePath = new List<Vector2>();

        NodeInformation curNode = end;

        while (curNode != null)
        {
            reversePath.Add(curNode.node.transform.position);
            curNode = curNode.parent;
        }

        reversePath.Reverse();
        m_Path = reversePath;
    }

    private NodeInformation GetCheapestNode(List<NodeInformation> nodes)
    {
        return nodes.OrderBy(n => n.fCost).First();
    }

    private bool DoesListContainNode(List<NodeInformation> nodeInformation, GridNode gridNode)
    {
        return nodeInformation.Any(x => x.node == gridNode);
    }

    private NodeInformation GetNodeInformationFromList(List<NodeInformation> nodeInformation, GridNode gridNode)
    {
        return nodeInformation.Find(x => x.node == gridNode);
    }

    private void DrawPath(List<NodeInformation> open, List<NodeInformation> closed)
    {
        if (m_Debug_ChangeTileColours)
        {
            Grid.ResetGridNodeColours();

            foreach (NodeInformation node in closed)
            {
                node.node.SetOpenInPathFinding();
            }

            foreach (NodeInformation node in open)
            {
                node.node.SetClosedInPathFinding();
            }
        }
    }
}

public class Task11_AStarPathfinding : MovingEntity
{
    SteeringBehaviour_Manager m_SteeringBehaviours;
    SteeringBehaviour_Seek m_Seek;

    [SerializeField]
    Pathfinding_AStar m_AStar;

    [Header("Debug")]
    [Tooltip("Draws the path of the agent")]
    [SerializeField]
    bool m_Debug_DrawPath;

    protected override void Awake()
    {
        base.Awake();

        m_SteeringBehaviours = GetComponent<SteeringBehaviour_Manager>();

        if (!m_SteeringBehaviours)
            Debug.LogError("Object doesn't have a Steering Behaviour Manager attached", this);

        m_Seek = GetComponent<SteeringBehaviour_Seek>();

        if (!m_Seek)
            Debug.LogError("Object doesn't have a Seek Steering Behaviour attached", this);

        m_AStar = new Pathfinding_AStar(true, false);
    }

    protected override Vector2 GenerateVelocity()
    {
        return m_SteeringBehaviours.GenerateSteeringForce();
    }

    protected void Update()
    {
        if (m_AStar.m_Path.Count == 0)
        {
            Rect size = Grid.m_GridSize;
            float x1 = Random.Range(size.xMin, size.xMax);
            float y1 = Random.Range(size.yMin, size.yMax);

            m_AStar.GeneratePath(Grid.GetNodeClosestWalkableToLocation(transform.position), Grid.GetNodeClosestWalkableToLocation(new Vector2(x1, y1)));
        }
        else
        {
            if (m_AStar.m_Path.Count > 0)
            {
                Vector2 closestPoint = m_AStar.GetClosestPointOnPath(transform.position);

                if (Maths.Magnitude(closestPoint - (Vector2)transform.position) < 0.5f)
                    closestPoint = m_AStar.GetNextPointOnPath(transform.position);

                m_Seek.m_TargetPosition = closestPoint;
            }
        }
    }

    void OnDrawGizmosSelected()
    {
        if (Application.isPlaying)
        {
            if (m_Debug_DrawPath)
            {
                Gizmos.DrawLine(transform.position, m_Seek.m_TargetPosition);

                if (m_AStar.m_Path.Count > 1)
                {
                    for (int i = 0; i < m_AStar.m_Path.Count - 1; ++i)
                    {
                        Gizmos.DrawLine(m_AStar.m_Path[i], m_AStar.m_Path[i + 1]);
                    }
                }
            }
        }
    }
}
